@implements IDisposable
@inject FeatureFlagStateProvider FeatureFlagStateProvider

<CascadingValue TValue="System.Threading.Tasks.Task<FeatureFlagState>" Value="@_currentFeatureFlagStateTask" ChildContent="@ChildContent" />

@code {
    private Task<FeatureFlagState>? _currentFeatureFlagStateTask;

    /// <summary>
    /// The content to which the authentication state should be provided.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    protected override void OnInitialized()
    {
        FeatureFlagStateProvider.FeatureFlagStateChanged += OnFeatureFlagStateChanged;

        _currentFeatureFlagStateTask = FeatureFlagStateProvider
            .GetFeatureFlagState();
    }

    private void OnFeatureFlagStateChanged(Task<FeatureFlagState> newFeatureFlagStateTask)
    {
        _ = InvokeAsync(() =>
        {
            _currentFeatureFlagStateTask = newFeatureFlagStateTask;
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        FeatureFlagStateProvider.FeatureFlagStateChanged -= OnFeatureFlagStateChanged;
    }
}